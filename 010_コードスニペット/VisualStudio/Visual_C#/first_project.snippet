<?xml version="1.0" encoding="utf-8" ?>
<CodeSnippets>
    <CodeSnippet Format="1.0.0">
        <Header>
            <Title>post_operation_first_project</Title>
            <Shortcut>post_operation_first_project</Shortcut>
            <Description>dataverseのpost_operationステージテンプレート</Description>
            <Author>ST</Author>
        </Header>
        <Snippet>
            <Code Language="CSharp">
                <![CDATA[var outputLog = new StringBuilder();
                        //処理結果→1:正常
                        var resultOptionLogKanri = 1;

                        Guid logKanriEnitityId = Guid.Empty;
                        Entity logKanriEnitity = null;

                        try
                        {
                            //ログテーブル新規作成
                            logKanriEnitity = new Entity("px03_tl001");
                            logKanriEnitity["px03_fc_id"] = FuncId;
                            logKanriEnitity["px03_sc_id"] = ScreenId;
                            logKanriEnitity["px03_pr_sb"] = new OptionSetValue(2);
                            logKanriEnitity["px03_prst_dttm"] = DateTime.UtcNow;
                            logKanriEnitityId = svc.Create(logKanriEnitity);

                            //トリガーテーブル新規作成

                            //メイン処理
                        }
                        catch (Exception e)
                        {
                            outputLog.AppendLine("例外エラー");
                            outputLog.AppendLine(e.Message);
                            outputLog.AppendLine(e.StackTrace);
                            //処理結果→2:エラー
                            resultOptionLogKanri = 2;
                        }
                        finally
                        {
                            //トリガーテーブル更新

                            //ログテーブル更新
                            logKanriEnitity = new Entity("px03_tl001");
                            logKanriEnitity.Id = logKanriEnitityId;
                            logKanriEnitity["px03_pr_rt"] = new OptionSetValue(resultOptionLogKanri);
                            if (outputLog.Length > 0)
                                logKanriEnitity["px03_pr_rt_ct"] = outputLog.ToString();
                            logKanriEnitity["px03_pred_dttm"] = DateTime.UtcNow;
                            svc.Update(logKanriEnitity);
                        }
                ]]>
            </Code>   
        </Snippet>
    </CodeSnippet>

    <CodeSnippet Format="1.0.0">
        <Header>
            <Title>pre_validation_first_project</Title>
            <Shortcut>pre_validation_first_project</Shortcut>
            <Description>dataverseのpre_validationステージテンプレート</Description>
            <Author>ST</Author>
        </Header>
        <Snippet>
            <Code Language="CSharp">
                <![CDATA[var outputLog = new StringBuilder();
                        var outputMessage = new StringBuilder();
                        //処理結果→1:正常
                        var resultOptionLogKanri = 1; 

                        Guid logKanriEnitityId = Guid.Empty;
                        Entity logKanriEnitity = null;

                        try
                        {
                            //ログテーブル新規作成
                            logKanriEnitity = new Entity("px03_tl001");
                            logKanriEnitity["px03_fc_id"] = FuncId;
                            logKanriEnitity["px03_sc_id"] = ScreenId;
                            logKanriEnitity["px03_pr_sb"] = new OptionSetValue(2);
                            logKanriEnitity["px03_prst_dttm"] = DateTime.UtcNow;
                            logKanriEnitityId = svc.Create(logKanriEnitity);

                            //トリガーテーブル新規作成

                            //メイン処理
                            var isValidate = false;
                            if(!isValidate)
                                outputMessage.AppendLine("出力エラーメッセージ")
                        }
                        catch(Exception e)
                        {
                            outputLog.AppendLine("例外エラー");
                            outputLog.AppendLine(e.Message);
                            outputLog.AppendLine(e.StackTrace);
                            //処理結果→2:エラー
                            resultOptionLogKanri = 2;
                        }
                        finally
                        {
                            //トリガーテーブル更新

                            //ログテーブル更新
                            logKanriEnitity = new Entity("px03_tl001");
                            logKanriEnitity.Id = logKanriEnitityId;
                            logKanriEnitity["px03_pr_rt"] = new OptionSetValue(resultOptionLogKanri);
                            if (outputLog.Length > 0)
                                logKanriEnitity["px03_pr_rt_ct"] = outputLog.ToString();
                            logKanriEnitity["px03_pred_dttm"] = DateTime.UtcNow;
                            svc.Update(logKanriEnitity);

                            //バリデーションチェックエラーメッセージ出力
                            if (outputMessage.Length > 0)
                                throw new InvalidPluginExecutionException(outputMessage.ToString());
                        }                
                ]]>
            </Code>   
        </Snippet>
    </CodeSnippet>
    <CodeSnippet Format="1.0.0">
        <Header>
            <Title>get_message_first_project</Title>
            <Shortcut>get_message_first_project</Shortcut>
            <Description>dataverseメッセージ取得</Description>
            <Author>ST</Author>
        </Header>
        <Snippet>
            <Declarations>
                <Literal>
                    <ID>message_code_let_name</ID>
                    <ToolTip>メッセージコード変数名</ToolTip>
                    <Default>message_code_let_name</Default>
                </Literal>
                <Literal>
                    <ID>message_lng_let_name</ID>
                    <ToolTip>メッセージコードロケール変数名</ToolTip>
                    <Default>message_lng_let_name</Default>
                </Literal>
                <Literal>
                    <ID>message_code_let_name</ID>
                    <ToolTip>メッセージコード変数名</ToolTip>
                    <Default>message_code_let_name</Default>
                </Literal>
                <Literal>
                    <ID>message_let_name</ID>
                    <ToolTip>メッセージ変数名</ToolTip>
                    <Default>message_let_name</Default>
                </Literal>
                <Literal>
                    <ID>message</ID>
                    <ToolTip>メッセージ</ToolTip>
                    <Default>message</Default>
                </Literal>
            </Declarations>
            <Code Language="CSharp">
                <![CDATA[//メッセージ取得
                        // public const string LngMessageJa = "ja";
                        //ドルアットマーク
                        string fetchXmlMessageKanri = "
                                    <fetch top='5000' >get_message_first_project_1
                                        <entity name='px03_tm107' >get_message_first_project_1
                                            <attribute name='px03_apl_msg_cd'/>get_message_first_project_1
                                            <attribute name='px03_lng' />get_message_first_project_1
                                            <attribute name='px03_apl_msg' />get_message_first_project_1
                                            <filter type='and'>get_message_first_project_1
                                                <filter type='or'>get_message_first_project_1
                                                    <condition attribute='px03_apl_msg_cd' operator='eq' value='{$message_code_let_name$}'/>get_message_first_project_1
                                                </filter>get_message_first_project_1
                                                <filter type='and'>get_message_first_project_1
                                                    <condition attribute='px03_lng' operator='eq' value='ja'/>get_message_first_project_1
                                                </filter>get_message_first_project_1
                                            </filter>get_message_first_project_1
                                        </entity>get_message_first_project_1
                                    </fetch>";
                        var queryMessageKanri = new FetchExpression(fetchXmlMessageKanri);
                        var messageKanriEntities = svc.RetrieveMultiple(queryMessageKanri).Entities;

                        var messageList = (from s in messageKanriEntities.AsEnumerable()
                                                select new
                                                {
                                                    aplMsgCd = (s["px03_apl_msg_cd"]).ToString(),
                                                    lng = (s["px03_lng"]).ToString(),
                                                    aplMsg = (s["px03_apl_msg"]).ToString()
                                                }).ToList();

                        //$message$
                        var $message_let_name$ = (from s in messageList
                                                    where s.aplMsgCd == $message_code_let_name$ && s.lng == $message_lng_let_name$
                                                    select new
                                                    {
                                                        s.aplMsg
                                                    }).ToList().First().aplMsg.ToString();            
                ]]>
            </Code>   
        </Snippet>
    </CodeSnippet>
</CodeSnippets>